// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConductOfCode.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Stack<T>")]
    public partial class StackTFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Stack.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Stack<T>", "\tIn order to store instances of the same specified type in last-in-first-out (LIF" +
                    "O) sequence\r\n\tAs a developer\r\n\tI want to use a Stack<T>", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Stack<T> shall store instances of the same specified type in last-in-first-ou" +
            "t (LIFO) order")]
        [NUnit.Framework.CategoryAttribute("Ubiquitous")]
        public virtual void TheStackTShallStoreInstancesOfTheSameSpecifiedTypeInLast_In_First_OutLIFOOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Stack<T> shall store instances of the same specified type in last-in-first-ou" +
                    "t (LIFO) order", new string[] {
                        "Ubiquitous"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Stack<T> shall return the number of elements contained when the property Coun" +
            "t is invoked")]
        [NUnit.Framework.CategoryAttribute("Ubiquitous")]
        public virtual void TheStackTShallReturnTheNumberOfElementsContainedWhenThePropertyCountIsInvoked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Stack<T> shall return the number of elements contained when the property Coun" +
                    "t is invoked", new string[] {
                        "Ubiquitous"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When the method Push is invoked, the Stack<T> shall inserts the element at the to" +
            "p")]
        [NUnit.Framework.CategoryAttribute("EventDriven")]
        public virtual void WhenTheMethodPushIsInvokedTheStackTShallInsertsTheElementAtTheTop()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the method Push is invoked, the Stack<T> shall inserts the element at the to" +
                    "p", new string[] {
                        "EventDriven"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When the method Pop is invoked, the Stack<T> shall remove and return the element " +
            "at the top")]
        [NUnit.Framework.CategoryAttribute("EventDriven")]
        public virtual void WhenTheMethodPopIsInvokedTheStackTShallRemoveAndReturnTheElementAtTheTop()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the method Pop is invoked, the Stack<T> shall remove and return the element " +
                    "at the top", new string[] {
                        "EventDriven"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When the method Peek is invoked, the Stack<T> shall return the element at the top" +
            " without removing it")]
        [NUnit.Framework.CategoryAttribute("EventDriven")]
        public virtual void WhenTheMethodPeekIsInvokedTheStackTShallReturnTheElementAtTheTopWithoutRemovingIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the method Peek is invoked, the Stack<T> shall return the element at the top" +
                    " without removing it", new string[] {
                        "EventDriven"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("While an element is present, the Stack<T> shall return true when the method Conta" +
            "ins is invoked")]
        [NUnit.Framework.CategoryAttribute("StateDriven")]
        public virtual void WhileAnElementIsPresentTheStackTShallReturnTrueWhenTheMethodContainsIsInvoked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("While an element is present, the Stack<T> shall return true when the method Conta" +
                    "ins is invoked", new string[] {
                        "StateDriven"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("While an element is not present, the Stack<T> shall return false when the method " +
            "Contains is invoked")]
        [NUnit.Framework.CategoryAttribute("StateDriven")]
        public virtual void WhileAnElementIsNotPresentTheStackTShallReturnFalseWhenTheMethodContainsIsInvoked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("While an element is not present, the Stack<T> shall return false when the method " +
                    "Contains is invoked", new string[] {
                        "StateDriven"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If empty and the method Pop is invoked, then the Stack<T> shall throw InvalidOper" +
            "ationException")]
        [NUnit.Framework.CategoryAttribute("UnwantedBehavior")]
        public virtual void IfEmptyAndTheMethodPopIsInvokedThenTheStackTShallThrowInvalidOperationException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If empty and the method Pop is invoked, then the Stack<T> shall throw InvalidOper" +
                    "ationException", new string[] {
                        "UnwantedBehavior"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If empty and the method Peek is invoked, then the Stack<T> shall throw InvalidOpe" +
            "rationException")]
        [NUnit.Framework.CategoryAttribute("UnwantedBehavior")]
        public virtual void IfEmptyAndTheMethodPeekIsInvokedThenTheStackTShallThrowInvalidOperationException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If empty and the method Peek is invoked, then the Stack<T> shall throw InvalidOpe" +
                    "rationException", new string[] {
                        "UnwantedBehavior"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Where instantiated with a specified collection, the Stack<T> shall be pre-populat" +
            "ed with the elements of the collection")]
        [NUnit.Framework.CategoryAttribute("Optional")]
        public virtual void WhereInstantiatedWithASpecifiedCollectionTheStackTShallBePre_PopulatedWithTheElementsOfTheCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Where instantiated with a specified collection, the Stack<T> shall be pre-populat" +
                    "ed with the elements of the collection", new string[] {
                        "Optional"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
